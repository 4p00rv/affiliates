// common

var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function(obj) {
    return typeof obj
} : function(obj) {
    return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj
};

function checkWidth() {
    var mq = window.matchMedia('(max-width: 1199px)');
    return mq.matches ? 50 : (document.getElementById('navigation') || '').scrollHeight
}

function toggleMobileMenu() {
    var toggleButton = document.getElementById('toggle-menu');
    if (!toggleButton) return;
    var navbar = document.getElementById('navigation');
    var navbar_item = document.getElementsByClassName('navbar-collapse')[0];
    var el_language_dropdown = document.getElementsByClassName('language-dropdown')[0];
    toggleButton.addEventListener('click', function(e) {
        e.stopPropagation();
        navbar.classList.toggle('expand');
        navbar_item.classList.toggle('expand');
        if (el_language_dropdown && /show/.test(el_language_dropdown.classList)) {
            toggleAllSiblings(el_language_dropdown.parentNode, filterById, 'invisible');
            el_language_dropdown.classList.remove('show')
        }
    })
}

function collapseMenu() {
    var navbar = document.getElementById('navigation');
    var navbar_item = document.getElementsByClassName('navbar-collapse')[0];
    if (navbar && navbar_item) {
        navbar.classList.remove('expand');
        navbar_item.classList.remove('expand')
    }
}

function scrollTo(to) {
    var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;
    if (typeof to === 'undefined') return;
    var start = window.pageYOffset;
    var change = to - start;
    var increment = 20;
    var currentTime = 0;
    var animateScroll = function animateScroll() {
        currentTime += increment;
        var val = Math.easeInOutQuad(currentTime, start, change, duration);
        document.body.scrollTop = val;
        document.documentElement.scrollTop = val;
        if (currentTime < duration) {
            setTimeout(animateScroll, increment)
        }
    };
    animateScroll()
}
Math.easeInOutQuad = function(current_time, start_value, change_in_value, duration) {
    var curr_time = current_time;
    curr_time /= duration / 2;
    if (curr_time < 1) return change_in_value / 2 * curr_time * curr_time + start_value;
    curr_time--;
    return -change_in_value / 2 * (curr_time * (curr_time - 2) - 1) + start_value
};

function getParamValue(url, key) {
    var regex = new RegExp('[?&]' + key + '(=([^&#]*)|&|#|$)');
    var results = regex.exec(url);
    if (!results || !results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, ' '))
}

function allLanguages() {
    return ['en', 'de', 'es', 'fr', 'id', 'it', 'ko', 'ja', 'pl', 'pt', 'ru', 'th', 'vi', 'zh_cn', 'zh_tw', 'ach']
}

function getLanguage() {
    var language = void 0;
    window.location.href.toLowerCase().split('/').slice(3).forEach(function(l) {
        if (!language && allLanguages().indexOf(l) >= 0) language = l
    });
    return language || 'en'
}

function urlFor(path) {
    var lang = getLanguage();
    var url = window.location.href;
    return '' + url.substring(0, url.indexOf('/' + lang + '/') + lang.length + 2) + path + '.html'
}

function urlForLanguage(lang) {
    var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window.location.href;
    var default_language = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'en';
    return url.replace(new RegExp('/' + getLanguage() + '/', 'i'), '/' + (lang || default_language).trim().toLowerCase() + '/')
}

function wsConnect() {
    var config_server = localStorage.getItem('config.server_url');
    var server_url = config_server || 'frontend.binaryws.com';
    endpointNotification(config_server);
    return new WebSocket('wss://' + server_url + '/websockets/v3?app_id=' + getAppId() + '&l=' + getLanguage())
}

function getAppId() {
    return localStorage.getItem('config.app_id') || (/staging\.binary\.com/i.test(window.location.hostname) ? '1098' : '1')
}

function wsSend(ws, request) {
    if (ws && request && (typeof request === 'undefined' ? 'undefined' : _typeof(request)) === 'object') {
        ws.send(JSON.stringify(request))
    }
}

function endpointNotification(config_server) {
    if (config_server && config_server.length > 0 && !document.getElementById('end_note')) {
        var el_end_note = document.createElement('div');
        el_end_note.setAttribute('id', 'end_note');
        el_end_note.innerHTML = 'The server <a href="' + urlFor('endpoint') + '">endpoint</a> is: ' + config_server;
        document.body.appendChild(el_end_note);
        document.body.style['padding-bottom'] = el_end_note.offsetHeight + 'px'
    }
}

function setSession(key, value) {
    if (typeof sessionStorage !== 'undefined') {
        try {
            sessionStorage.setItem(key, value);
            return true
        } catch (e) {
            return false
        }
    }
    return false
}
if (window.NodeList && !NodeList.prototype.forEach) {
    NodeList.prototype.forEach = function(callback) {
        var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window;
        for (var i = 0; i < this.length; i++) {
            callback.call(thisArg, this[i], i, this)
        }
    }
}

function filterById(elem) {
    return !/^(language)$/i.test(elem.id)
}

function toggleAllSiblings(elem, filter, class_name) {
    var el = elem.parentNode.firstChild;
    do {
        if (el.nodeType !== 3 && (!filter || filter(el))) {
            el.classList.toggle(class_name)
        }
        el = el.nextSibling
    } while (el)
}

function setupCrowdin() {
    var isInContextEnvironment = function isInContextEnvironment() {
        return /^https:\/\/staging\.binary\.com\/translations\//i.test(window.location.href) && /ach/i.test(getLanguage())
    };
    if (isInContextEnvironment()) {
        var el_lang = document.getElementById('language');
        if (el_lang) el_lang.style.display = 'none';
        window._jipt = [];
        window._jipt.push(['project', 'binary-static']);
        if (document.body) {
            var crowdinScript = document.createElement('script');
            crowdinScript.setAttribute('src', document.location.protocol + '//cdn.crowdin.com/jipt/jipt.js');
            crowdinScript.setAttribute('type', 'text/javascript');
            document.body.appendChild(crowdinScript)
        }
    }
}

function commonOnload() {
    setupCrowdin()
}

function jpClient() {
    return getLanguage() === 'ja'
}

function recordAffiliateExposure() {
    var Url = window.location;
    var token = getParamValue(Url, 't');
    if (!token || token.length !== 32) {
        return false
    }
    showAfffiliatePopup();
    var token_length = token.length;
    var is_subsidiary = /\w{1}/.test(getParamValue(Url, 's'));
    var cookie_token = Cookies.getJSON('affiliate_tracking');
    if (cookie_token) {
        if (is_subsidiary && cookie_token && cookie_token.t) {
            return false
        }
    }
    var cookie_hash = {};
    if (token_length === 32) {
        cookie_hash.t = token.toString()
    }
    if (is_subsidiary) {
        cookie_hash.s = '1'
    }
    Cookies.set('affiliate_tracking', cookie_hash, {
        expires: 365,
        path: '/',
        domain: /\.binary\.com/i.test(location.hostname) ? '.' + location.hostname.split('.').slice(-2).join('.') : location.hostname
    });
    return true
}

function showAfffiliatePopup() {
    var clients_country = sessionStorage.getItem('clients_country');
    var xmlhttp = new XMLHttpRequest;
    var container_id = 'affiliate_disclaimer_popup';
    var el_affiliate_popup = document.getElementById(container_id);
    if (isLoggedIn()) return;
    if (jpClient() || clients_country === 'jp') {
        xmlhttp.onreadystatechange = function() {
            if (xmlhttp.readyState === XMLHttpRequest.DONE && xmlhttp.status === 200) {
                var div = document.createElement('div');
                var parser = new DOMParser;
                var el = parser.parseFromString(xmlhttp.response, 'text/html');
                var element = el.body.firstChild;
                div.classList.add('lightbox');
                div.appendChild(element);
                el_affiliate_popup.appendChild(div);
                var el_affiliate_btn = document.getElementById('btn_affiliate_proceed');
                el_affiliate_btn.removeEventListener('click', close);
                el_affiliate_btn.addEventListener('click', close);
                document.body.classList.add('scroll-lock')
            }
        };
        xmlhttp.open('GET', urlFor('affiliate_disclaimer'), true);
        xmlhttp.send()
    }

    function close() {
        document.body.classList.remove('scroll-lock');
        el_affiliate_popup.remove()
    }
}

function isLoggedIn() {
    function get(key) {
        var loginid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : localStorage.getItem('active_loginid');
        var value = void 0;
        var client_object = getAllAccountsObject();
        if (key === 'loginid') {
            value = loginid || localStorage.getItem('active_loginid')
        } else {
            var current_client = client_object[loginid] || getAllAccountsObject()[loginid] || {};
            value = key ? current_client[key] : current_client
        }
        if (!Array.isArray(value) && (+value === 1 || +value === 0 || value === 'true' || value === 'false')) {
            value = JSON.parse(value || false)
        }
        return value
    }

    function getAllAccountsObject() {
        return JSON.parse(localStorage.getItem('client.accounts'))
    }
    return get('loginid') && get('token')
}

function outdatedBrowser() {
    var src = '//browser-update.org/update.min.js';
    if (document.querySelector('script[src*="' + src + '"]')) return;
    var el_message = document.getElementById('outdated_browser_message');
    var message = el_message ? el_message.innerHTML : 'Your web browser ({brow_name}) is out of date and may affect your trading experience. Proceed at your own risk. <a href="https://www.whatbrowser.org/" target="_blank">Update browser</a>';
    window.$buoop = {
        vs: {
            i: 11,
            f: -4,
            o: -4,
            s: 9,
            c: -4
        },
        api: 4,
        url: 'https://whatbrowser.org/',
        noclose: true,
        text: message,
        reminder: 0
    };
    if (document.body) {
        var script = document.createElement('script');
        script.setAttribute('src', src);
        document.body.appendChild(script)
    }
}
window.addEventListener('load', function() {
    outdatedBrowser()
}); //# sourceMappingURL=common.js.map

------------------------------------------------------------------------------

// Landing Japan.js

window.onload = function() {
    getClientCountry();
    if (!jpClient()) {
        window.location = urlForLanguage('ja')
    }
    initForm('email_top');
    initForm('email_middle');
    initForm('email_bottom');
    recordAffiliateExposure();
    commonOnload();
    var gclid = getParamValue(document.referrer, 'gclid');
    if (gclid) {
        localStorage.setItem('gclid', gclid)
    }
};

function initForm(id) {
    var signup_form = document.getElementById(id);
    if (!signup_form) {
        return
    }
    var ws = wsConnect();
    var email_sent = false;

    function sendVerifyEmail(val) {
        if (!checkCountry(val)) {
            return
        }
        var trimmed_email = trimEmail(val);
        wsSend(ws, {
            verify_email: trimmed_email,
            type: 'account_opening'
        })
    }

    function verifySubmit(msg) {
        var response = JSON.parse(msg.data);
        setValidationStyle(signup_form, el_email, response.error);
        if (!response.error) {
            document.querySelectorAll('.signup-form').forEach(function(el) {
                el.querySelector('.signup-form-input').classList.add('invisible');
                el.querySelector('.signup-form-success').classList.remove('invisible');
                email_sent = true
            })
        }
    }

    function trimEmail(str) {
        return str.replace(/\s/g, '')
    }

    function checkCountry(val) {
        var clients_country = sessionStorage.getItem('clients_country');
        if (clients_country !== 'my' || /@binary\.com$/.test(val)) {
            return true
        }
        document.querySelectorAll('.signup-form').forEach(function(el) {
            el.querySelector('.signup-form-input').classList.add('invisible');
            el.querySelector('.signup-form-error').classList.remove('invisible')
        });
        return false
    }

    function connect() {
        if (email_sent) return;
        ws = wsConnect();
        ws.onmessage = verifySubmit;
        ws.onclose = connect
    }
    var validation_set = false;
    signup_form.addEventListener('submit', handleSubmit);
    var el_email = void 0;

    function handleSubmit(e) {
        e.preventDefault();
        var el_form = this;
        el_email = el_form.querySelector('input[type="email"]');
        if (!validateEmail(trimEmail(el_email.value))) {
            if (!validation_set) {
                ['input', 'change'].forEach(function(evt) {
                    el_email.addEventListener(evt, function() {
                        setValidationStyle(signup_form, el_email, !validateEmail(trimEmail(el_email.value)))
                    })
                });
                setValidationStyle(signup_form, el_email, !validateEmail(trimEmail(el_email.value)));
                validation_set = true
            }
            var to = this.offsetTop - 100;
            scrollTo(to, 500);
            return
        }
        if (ws.readyState === 1) {
            sendVerifyEmail(el_email.value)
        } else {
            ws.onopen = sendVerifyEmail(el_email.value)
        }
    }
    ws.onmessage = verifySubmit;
    ws.onclose = connect
}

function validateEmail(email) {
    return /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,63}$/.test(email)
}

function setValidationStyle(form, element, has_error) {
    var error_class = 'error-field';
    var invisible_class = 'invisible';
    form.querySelectorAll('input[type="email"]').forEach(function(el) {
        el.classList[has_error ? 'add' : 'remove'](error_class)
    });
    if (element.value.length < 1) {
        form.querySelectorAll('.error_no_email').forEach(function(el) {
            el.classList[has_error ? 'remove' : 'add'](invisible_class)
        });
        form.querySelectorAll('.error_validate_email').forEach(function(el) {
            el.classList[has_error ? 'add' : 'remove'](invisible_class)
        })
    } else if (element.value.length >= 1) {
        form.querySelectorAll('.error_validate_email').forEach(function(el) {
            el.classList[has_error ? 'remove' : 'add'](invisible_class)
        });
        form.querySelectorAll('.error_no_email').forEach(function(el) {
            el.classList[has_error ? 'add' : 'remove'](invisible_class)
        })
    }
    if (!has_error) {
        form.querySelectorAll('.error_validate_email').forEach(function(el) {
            el.classList.add(invisible_class)
        });
        form.querySelectorAll('.error_no_email').forEach(function(el) {
            el.classList.add(invisible_class)
        })
    }
}

function getClientCountry() {
    var clients_country = sessionStorage.getItem('clients_country');
    if (!clients_country) {
        var accounts = JSON.parse(localStorage.getItem('client.accounts') || null);
        if (accounts) {
            Object.keys(accounts).some(function(loginid) {
                if (accounts[loginid].residence) {
                    clients_country = accounts[loginid].residence;
                    setSession('clients_country', clients_country);
                    return true
                }
                return false
            })
        }
    }
    var ws = wsConnect();

    function sendRequests() {
        if (!clients_country) wsSend(ws, {
            website_status: 1
        });
        wsSend(ws, {
            time: 1
        })
    }
    if (ws.readyState === 1) {
        sendRequests()
    } else {
        ws.onopen = sendRequests
    }
    ws.onmessage = function(msg) {
        var response = JSON.parse(msg.data);
        if (response.website_status) {
            clients_country = response.website_status.clients_country;
            setSession('clients_country', clients_country)
        }
    };
    return clients_country
} //# sourceMappingURL=japan.js.map